// <auto-generated />
using System;
using Bioterio.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bioterio.Migrations
{
    [DbContext(typeof(bd_lesContext))]
    [Migration("20180719005235_Add_DefaultProfileColumn")]
    partial class Add_DefaultProfileColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Bioterio.AgenteTrat", b =>
                {
                    b.Property<int>("IdAgenTra")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idAgenTra")
                        .HasColumnType("int(11)");

                    b.Property<string>("NomeAgenTra")
                        .IsRequired()
                        .HasColumnName("nomeAgenTra")
                        .HasMaxLength(45);

                    b.HasKey("IdAgenTra");

                    b.ToTable("agente_trat");
                });

            modelBuilder.Entity("Bioterio.CircuitoTanque", b =>
                {
                    b.Property<int>("IdCircuito")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idCircuito")
                        .HasColumnType("int(11)");

                    b.Property<string>("CodigoCircuito")
                        .IsRequired()
                        .HasColumnName("codigoCircuito")
                        .HasMaxLength(15);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnName("dataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataFinal")
                        .HasColumnName("dataFinal")
                        .HasColumnType("datetime");

                    b.Property<int>("ProjetoIdProjeto")
                        .HasColumnName("Projeto_idProjeto")
                        .HasColumnType("int(11)");

                    b.Property<int>("isarchived")
                        .HasColumnName("isarchived")
                        .HasColumnType("int(1)");

                    b.HasKey("IdCircuito");

                    b.HasIndex("ProjetoIdProjeto")
                        .HasName("fk_Circuito_Tanque_Projeto1_idx");

                    b.ToTable("circuito_tanque");
                });

            modelBuilder.Entity("Bioterio.Elementoequipa", b =>
                {
                    b.Property<int>("IdElementoEquipa")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idElementoEquipa")
                        .HasColumnType("int(11)");

                    b.Property<string>("Funcao")
                        .IsRequired()
                        .HasColumnName("funcao")
                        .HasMaxLength(40);

                    b.Property<int>("FuncionarioIdFuncionario")
                        .HasColumnName("Funcionario_idFuncionario")
                        .HasColumnType("int(11)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome")
                        .HasMaxLength(50);

                    b.Property<int>("ProjetoIdProjeto")
                        .HasColumnName("Projeto_idProjeto")
                        .HasColumnType("int(11)");

                    b.Property<int>("isarchived")
                        .HasColumnName("isarchived")
                        .HasColumnType("int(1)");

                    b.HasKey("IdElementoEquipa");

                    b.HasIndex("FuncionarioIdFuncionario")
                        .HasName("fk_equipaProjeto_Funcionario1");

                    b.HasIndex("ProjetoIdProjeto")
                        .HasName("fk_equipaProjeto_Projeto1");

                    b.ToTable("elementoequipa");
                });

            modelBuilder.Entity("Bioterio.Ensaio", b =>
                {
                    b.Property<int>("IdEnsaio")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idEnsaio")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("DataFim")
                        .HasColumnName("dataFim")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnName("dataInicio")
                        .HasColumnType("datetime");

                    b.Property<string>("DescTratamento")
                        .IsRequired()
                        .HasColumnName("descTratamento")
                        .HasMaxLength(45);

                    b.Property<int>("GrauSeveridade")
                        .HasColumnName("grauSeveridade")
                        .HasColumnType("int(11)");

                    b.Property<int>("LoteIdLote")
                        .HasColumnName("Lote_idLote")
                        .HasColumnType("int(11)");

                    b.Property<int?>("NroAnimaisAutoriz")
                        .IsRequired()
                        .HasColumnName("nroAnimaisAutoriz")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProjetoIdProjeto")
                        .HasColumnName("Projeto_idProjeto")
                        .HasColumnType("int(11)");

                    b.Property<int>("isarchived")
                        .HasColumnName("isarchived")
                        .HasColumnType("int(1)");

                    b.HasKey("IdEnsaio");

                    b.HasIndex("LoteIdLote")
                        .HasName("fk_Ensaio_Lote1");

                    b.HasIndex("ProjetoIdProjeto")
                        .HasName("fk_Ensaio_Projeto1");

                    b.ToTable("ensaio");
                });

            modelBuilder.Entity("Bioterio.Finalidade", b =>
                {
                    b.Property<int>("IdFinalidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idFinalidade")
                        .HasColumnType("int(11)");

                    b.Property<string>("TFinalidade")
                        .IsRequired()
                        .HasColumnName("T_Finalidade")
                        .HasMaxLength(45);

                    b.HasKey("IdFinalidade");

                    b.ToTable("finalidade");
                });

            modelBuilder.Entity("Bioterio.Models.Concelho", b =>
                {
                    b.Property<int>("IdConcelho")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("DistritoId")
                        .HasColumnName("Distrito_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("NomeConcelho")
                        .IsRequired()
                        .HasColumnName("nomeConcelho")
                        .HasMaxLength(45);

                    b.HasKey("IdConcelho");

                    b.HasIndex("DistritoId")
                        .HasName("fk_Concelho_Distrito1_idx");

                    b.ToTable("concelho");
                });

            modelBuilder.Entity("Bioterio.Models.Distrito", b =>
                {
                    b.Property<int>("IdDistrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("NomeDistrito")
                        .IsRequired()
                        .HasColumnName("nomeDistrito")
                        .HasMaxLength(45);

                    b.HasKey("IdDistrito");

                    b.ToTable("distrito");
                });

            modelBuilder.Entity("Bioterio.Models.Especie", b =>
                {
                    b.Property<int>("IdEspecie")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idEspecie")
                        .HasColumnType("int(11)");

                    b.Property<int?>("FamiliaIdFamilia")
                        .IsRequired()
                        .HasColumnName("Familia_idFamilia")
                        .HasColumnType("int(11)");

                    b.Property<int?>("GrupoIdGrupo")
                        .IsRequired()
                        .HasColumnName("Grupo_idGrupo")
                        .HasColumnType("int(11)");

                    b.Property<string>("NomeCient")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("NomeVulgar")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("IdEspecie");

                    b.HasIndex("FamiliaIdFamilia")
                        .HasName("fk_Especie_Familia1_idx");

                    b.HasIndex("GrupoIdGrupo")
                        .HasName("fk_Especie_Grupo1_idx");

                    b.ToTable("especie");
                });

            modelBuilder.Entity("Bioterio.Models.Familia", b =>
                {
                    b.Property<int>("IdFamilia")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idFamilia")
                        .HasColumnType("int(11)");

                    b.Property<int?>("GrupoIdGrupo")
                        .IsRequired()
                        .HasColumnName("Grupo_idGrupo")
                        .HasColumnType("int(11)");

                    b.Property<string>("NomeFamilia")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("IdFamilia");

                    b.HasIndex("GrupoIdGrupo")
                        .HasName("fk_Familia_Grupo1_idx");

                    b.ToTable("familia");
                });

            modelBuilder.Entity("Bioterio.Models.Fornecedorcolector", b =>
                {
                    b.Property<int>("IdFornColect")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idFornColect")
                        .HasColumnType("int(11)");

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<int?>("Nif")
                        .IsRequired()
                        .HasColumnName("NIF")
                        .HasColumnType("int(10)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<int?>("NroLicenca")
                        .IsRequired()
                        .HasColumnName("nroLicenca")
                        .HasColumnType("int(11)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnName("telefone")
                        .HasMaxLength(10);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.HasKey("IdFornColect");

                    b.ToTable("fornecedorcolector");
                });

            modelBuilder.Entity("Bioterio.Models.Funcionario", b =>
                {
                    b.Property<int>("IdFuncionario")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idFuncionario")
                        .HasColumnType("int(11)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnName("nomeCompleto")
                        .HasMaxLength(45);

                    b.HasKey("IdFuncionario");

                    b.ToTable("funcionario");
                });

            modelBuilder.Entity("Bioterio.Models.Grupo", b =>
                {
                    b.Property<int>("IdGrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idGrupo")
                        .HasColumnType("int(11)");

                    b.Property<string>("NomeGrupo")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("IdGrupo");

                    b.ToTable("grupo");
                });

            modelBuilder.Entity("Bioterio.Models.Localcaptura", b =>
                {
                    b.Property<int>("IdLocalCaptura")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idLocalCaptura")
                        .HasColumnType("int(11)");

                    b.Property<int>("ConcelhoId")
                        .HasColumnName("Concelho_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("DistritoId")
                        .HasColumnName("Distrito_id")
                        .HasColumnType("int(11)");

                    b.Property<float?>("Latitude")
                        .HasColumnType("float(10,6)");

                    b.Property<string>("Localidade")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<float?>("Longitude")
                        .HasColumnType("float(10,6)");

                    b.HasKey("IdLocalCaptura");

                    b.HasIndex("ConcelhoId")
                        .HasName("fk_LocalCaptura_Concelho1_idx");

                    b.HasIndex("DistritoId")
                        .HasName("fk_LocalCaptura_Distrito1");

                    b.ToTable("localcaptura");
                });

            modelBuilder.Entity("Bioterio.Models.Lote", b =>
                {
                    b.Property<int>("IdLote")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idLote")
                        .HasColumnType("int(11)");

                    b.Property<string>("CodigoLote")
                        .IsRequired()
                        .HasColumnName("codigoLote")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("DataFim")
                        .HasColumnName("dataFim")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnName("dataInicio")
                        .HasColumnType("datetime");

                    b.Property<int>("FuncionarioIdFuncionario")
                        .HasColumnName("Funcionario_idFuncionario");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<int>("RegNovosAnimaisIdRegAnimal")
                        .HasColumnName("Reg_Novos_Animais_idRegAnimal")
                        .HasColumnType("int(11)");

                    b.HasKey("IdLote");

                    b.HasIndex("FuncionarioIdFuncionario")
                        .HasName("fk_Lote_Funcionario1_idx");

                    b.HasIndex("RegNovosAnimaisIdRegAnimal")
                        .HasName("fk_Lote_Reg_Novos_Animais1_idx");

                    b.ToTable("lote");
                });

            modelBuilder.Entity("Bioterio.Models.LoteSubLote", b =>
                {
                    b.Property<int>("LoteIdLotePrev")
                        .HasColumnName("Lote_idLote_prev")
                        .HasColumnType("int(11)");

                    b.Property<int>("LoteIdLoteAtual")
                        .HasColumnName("Lote_idLote_atual")
                        .HasColumnType("int(11)");

                    b.Property<string>("CodigoSubLote")
                        .IsRequired()
                        .HasColumnName("codigoSubLote")
                        .HasMaxLength(15);

                    b.HasKey("LoteIdLotePrev", "LoteIdLoteAtual");

                    b.HasIndex("LoteIdLoteAtual")
                        .HasName("fk_Sub_Lote_Lote2_idx");

                    b.HasIndex("LoteIdLotePrev")
                        .HasName("fk_Sub_Lote_Lote1_idx");

                    b.ToTable("lote_sub_lote");
                });

            modelBuilder.Entity("Bioterio.Models.Perfil", b =>
                {
                    b.Property<int>("IdPerfil")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdPerfil")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IsDefault")
                        .HasColumnName("IsDefault")
                        .HasColumnType("int(1)");

                    b.Property<string>("NomePerfil")
                        .IsRequired()
                        .HasColumnName("nomePerfil")
                        .HasMaxLength(45);

                    b.HasKey("IdPerfil");

                    b.ToTable("perfil");
                });

            modelBuilder.Entity("Bioterio.Models.ProfileRole", b =>
                {
                    b.Property<int>("IdPerfil")
                        .HasColumnName("IdPerfil")
                        .HasColumnType("int(11)");

                    b.Property<string>("RoleId")
                        .HasColumnName("RoleId")
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("IdPerfil", "RoleId");

                    b.HasIndex("IdPerfil")
                        .HasName("fk_ProfileRole_Profile_idx");

                    b.HasIndex("RoleId")
                        .HasName("fk_ProfileRole_Role_idx");

                    b.ToTable("profilerole");
                });

            modelBuilder.Entity("Bioterio.Models.RegNovosAnimais", b =>
                {
                    b.Property<int>("IdRegAnimal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idRegAnimal")
                        .HasColumnType("int(11)");

                    b.Property<sbyte?>("AdicaoO2")
                        .IsRequired()
                        .HasColumnName("Adicao_O2")
                        .HasColumnType("tinyint(1)");

                    b.Property<float?>("Anestesico")
                        .HasColumnName("anestesico");

                    b.Property<sbyte?>("Arejamento")
                        .IsRequired()
                        .HasColumnType("tinyint(1)");

                    b.Property<float?>("CompMedio")
                        .HasColumnName("compMedio");

                    b.Property<DateTime?>("DataNasc")
                        .HasColumnName("dataNasc")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("DuracaoViagem")
                        .HasColumnType("time");

                    b.Property<int?>("EspecieIdEspecie")
                        .IsRequired()
                        .HasColumnName("Especie_idEspecie")
                        .HasColumnType("int(11)");

                    b.Property<int?>("FornecedorIdFornColect")
                        .IsRequired()
                        .HasColumnName("Fornecedor_idFornColect")
                        .HasColumnType("int(11)");

                    b.Property<int>("FuncionarioIdFuncionario")
                        .HasColumnName("Funcionario_idFuncionario");

                    b.Property<int>("FuncionarioIdFuncionario1")
                        .HasColumnName("Funcionario_idFuncionario1");

                    b.Property<sbyte?>("Gelo")
                        .IsRequired()
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Idade")
                        .HasColumnName("idade")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Imaturos")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Juvenis")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Larvas")
                        .HasColumnType("int(11)");

                    b.Property<int?>("LocalCapturaIdLocalCaptura")
                        .HasColumnName("LocalCaptura_idLocalCaptura")
                        .HasColumnType("int(11)");

                    b.Property<int?>("NroCaixasIsoter")
                        .HasColumnName("nroCaixasIsoter")
                        .HasColumnType("int(11)");

                    b.Property<int?>("NroContentores")
                        .HasColumnName("nroContentores")
                        .HasColumnType("int(11)");

                    b.Property<int?>("NroExemplares")
                        .IsRequired()
                        .HasColumnName("nroExemplares")
                        .HasColumnType("int(11)");

                    b.Property<int?>("NroFemeas")
                        .HasColumnName("nroFemeas")
                        .HasColumnType("int(11)");

                    b.Property<int?>("NroMachos")
                        .HasColumnName("nroMachos")
                        .HasColumnType("int(11)");

                    b.Property<int?>("NroMortosCheg")
                        .HasColumnName("nroMortosCheg")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Ovos")
                        .HasColumnType("int(11)");

                    b.Property<float?>("PesoMedio")
                        .HasColumnName("pesoMedio");

                    b.Property<sbyte?>("Refrigeracao")
                        .IsRequired()
                        .HasColumnName("refrigeracao")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RespTransporte")
                        .IsRequired()
                        .HasColumnName("respTransporte")
                        .HasMaxLength(45);

                    b.Property<float?>("SatO2transp")
                        .HasColumnName("satO2Transp");

                    b.Property<int?>("TOrigemIdTOrigem")
                        .IsRequired()
                        .HasColumnName("T_Origem_idT_Origem")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TempChegada")
                        .HasColumnName("tempChegada")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TempPartida")
                        .HasColumnName("tempPartida")
                        .HasColumnType("int(11)");

                    b.Property<string>("TipoContentor")
                        .IsRequired()
                        .HasColumnName("tipoContentor")
                        .HasMaxLength(45);

                    b.Property<int?>("TipoEstatutoGeneticoIdTipoEstatutoGenetico")
                        .IsRequired()
                        .HasColumnName("TipoEstatutoGenetico_idTipoEstatutoGenetico")
                        .HasColumnType("int(11)");

                    b.Property<float?>("VolAgua")
                        .HasColumnName("volAgua");

                    b.Property<float?>("VolContentor")
                        .HasColumnName("volContentor");

                    b.Property<sbyte?>("sedacao")
                        .IsRequired()
                        .HasColumnName("sedacao")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IdRegAnimal");

                    b.HasIndex("EspecieIdEspecie")
                        .HasName("fk_Reg_Novos_Animais_Especie1");

                    b.HasIndex("FornecedorIdFornColect")
                        .HasName("fk_Reg_Novos_Animais_Fornecedor1");

                    b.HasIndex("FuncionarioIdFuncionario")
                        .HasName("fk_Reg_Novos_Animais_Funcionario1");

                    b.HasIndex("FuncionarioIdFuncionario1")
                        .HasName("fk_Reg_Novos_Animais_Funcionario2");

                    b.HasIndex("LocalCapturaIdLocalCaptura")
                        .HasName("fk_Reg_Novos_Animais_LocalCaptura1");

                    b.HasIndex("TOrigemIdTOrigem")
                        .HasName("fk_Reg_Novos_Animais_T_Origem1");

                    b.HasIndex("TipoEstatutoGeneticoIdTipoEstatutoGenetico")
                        .HasName("fk_Reg_Novos_Animais_TipoEstatutoGenetico1");

                    b.ToTable("reg_novos_animais");
                });

            modelBuilder.Entity("Bioterio.Models.Tipoestatutogenetico", b =>
                {
                    b.Property<int>("IdTipoEstatutoGenetico")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idTipoEstatutoGenetico")
                        .HasColumnType("int(11)");

                    b.Property<string>("TipoEstatutoGeneticocol")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("IdTipoEstatutoGenetico");

                    b.ToTable("tipoestatutogenetico");
                });

            modelBuilder.Entity("Bioterio.Models.TOrigem", b =>
                {
                    b.Property<int>("IdTOrigem")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idT_Origem")
                        .HasColumnType("int(11)");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("IdTOrigem");

                    b.ToTable("t_origem");
                });

            modelBuilder.Entity("Bioterio.Motivo", b =>
                {
                    b.Property<int>("IdMotivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idMotivo")
                        .HasColumnType("int(11)");

                    b.Property<string>("NomeMotivo")
                        .IsRequired()
                        .HasColumnName("nomeMotivo")
                        .HasMaxLength(45);

                    b.Property<string>("TipoMotivo")
                        .IsRequired()
                        .HasColumnName("tipoMotivo")
                        .HasMaxLength(45);

                    b.HasKey("IdMotivo");

                    b.ToTable("motivo");
                });

            modelBuilder.Entity("Bioterio.PlanoAlimentar", b =>
                {
                    b.Property<int>("IdPlanAlim")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idPlanAlim")
                        .HasColumnType("int(11)");

                    b.Property<string>("MarcaAlim")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<float?>("Racao")
                        .IsRequired();

                    b.Property<float>("RacaoDia");

                    b.Property<float>("Temperatura");

                    b.Property<int>("Tipo")
                        .HasColumnType("int(11)");

                    b.HasKey("IdPlanAlim");

                    b.ToTable("plano_alimentar");
                });

            modelBuilder.Entity("Bioterio.Projeto", b =>
                {
                    b.Property<int>("IdProjeto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idProjeto")
                        .HasColumnType("int(11)");

                    b.Property<string>("AutorizacaoDgva")
                        .IsRequired()
                        .HasColumnName("AutorizacaoDGVA")
                        .HasMaxLength(45);

                    b.Property<DateTime>("DataFim")
                        .HasColumnName("dataFim")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnName("dataInicio")
                        .HasColumnType("datetime");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<int?>("NroAnimaisAutoriz")
                        .IsRequired()
                        .HasColumnName("nroAnimaisAutoriz")
                        .HasColumnType("int(11)");

                    b.Property<int?>("RefOrbea")
                        .IsRequired()
                        .HasColumnName("RefORBEA")
                        .HasColumnType("int(11)");

                    b.Property<sbyte>("SubmisInsEurop")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("isarchived")
                        .HasColumnName("isarchived")
                        .HasColumnType("int(1)");

                    b.HasKey("IdProjeto");

                    b.ToTable("projeto");
                });

            modelBuilder.Entity("Bioterio.RegAlimentar", b =>
                {
                    b.Property<int>("IdRegAlim")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idRegAlim")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Data")
                        .HasColumnName("data")
                        .HasColumnType("datetime");

                    b.Property<float>("Peso");

                    b.Property<int>("PlanoAlimentarIdPlanAlim")
                        .HasColumnName("Plano_Alimentar_idPlanAlim")
                        .HasColumnType("int(11)");

                    b.Property<float?>("Sobras")
                        .IsRequired();

                    b.Property<int>("TanqueIdTanque")
                        .HasColumnName("Tanque_idTanque")
                        .HasColumnType("int(11)");

                    b.Property<int>("isarchived")
                        .HasColumnName("isarchived")
                        .HasColumnType("int(1)");

                    b.HasKey("IdRegAlim");

                    b.HasIndex("PlanoAlimentarIdPlanAlim")
                        .HasName("fk_Reg_Alimentar_Plano_Alimentar1");

                    b.HasIndex("TanqueIdTanque")
                        .HasName("fk_Reg_Alimentar_Tanque1");

                    b.ToTable("reg_alimentar");
                });

            modelBuilder.Entity("Bioterio.RegAmostragens", b =>
                {
                    b.Property<int>("IdRegAmo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idRegAmo")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Data")
                        .HasColumnName("data")
                        .HasColumnType("datetime");

                    b.Property<int>("NroIndividuos")
                        .HasColumnName("nroIndividuos")
                        .HasColumnType("int(11)");

                    b.Property<float>("PesoMedio")
                        .HasColumnName("pesoMedio");

                    b.Property<float>("PesoTotal")
                        .HasColumnName("pesoTotal");

                    b.Property<int>("TanqueIdTanque")
                        .HasColumnName("Tanque_idTanque")
                        .HasColumnType("int(11)");

                    b.Property<int>("isarchived")
                        .HasColumnName("isarchived")
                        .HasColumnType("int(1)");

                    b.HasKey("IdRegAmo");

                    b.HasIndex("TanqueIdTanque")
                        .HasName("fk_Reg_Amostragens_Tanque1");

                    b.ToTable("reg_amostragens");
                });

            modelBuilder.Entity("Bioterio.RegCondAmb", b =>
                {
                    b.Property<int>("IdRegCondAmb")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idRegCondAmb")
                        .HasColumnType("int(11)");

                    b.Property<int>("CircuitoTanqueIdCircuito")
                        .HasColumnName("Circuito_Tanque_idCircuito")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Data")
                        .HasColumnName("data")
                        .HasColumnType("datetime");

                    b.Property<float?>("NivelO2")
                        .IsRequired()
                        .HasColumnName("nivelO2");

                    b.Property<float?>("SalinidadeAgua")
                        .IsRequired()
                        .HasColumnName("salinidadeAgua");

                    b.Property<float?>("Temperatura")
                        .IsRequired()
                        .HasColumnName("temperatura");

                    b.Property<float?>("VolAgua")
                        .IsRequired()
                        .HasColumnName("volAgua");

                    b.Property<int>("isarchived")
                        .HasColumnName("isarchived")
                        .HasColumnType("int(1)");

                    b.HasKey("IdRegCondAmb");

                    b.HasIndex("CircuitoTanqueIdCircuito")
                        .HasName("fk_Reg_Cond_Amb_Circuito_Tanque1");

                    b.ToTable("reg_cond_amb");
                });

            modelBuilder.Entity("Bioterio.RegManutencao", b =>
                {
                    b.Property<int>("IdRegMan")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idRegMan")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Data")
                        .HasColumnName("data")
                        .HasColumnType("datetime");

                    b.Property<int>("TanqueIdTanque")
                        .HasColumnName("Tanque_idTanque")
                        .HasColumnType("int(11)");

                    b.Property<int>("TipoManuntecaoIdTManutencao")
                        .HasColumnName("Tipo_Manuntecao_idT_Manutencao")
                        .HasColumnType("int(11)");

                    b.Property<int>("isarchived")
                        .HasColumnName("isarchived")
                        .HasColumnType("int(1)");

                    b.HasKey("IdRegMan");

                    b.HasIndex("TanqueIdTanque")
                        .HasName("fk_Reg_Manutencao_Tanque1");

                    b.HasIndex("TipoManuntecaoIdTManutencao")
                        .HasName("fk_Reg_Manutencao_Tipo_Manuntecao1");

                    b.ToTable("reg_manutencao");
                });

            modelBuilder.Entity("Bioterio.RegRemocoes", b =>
                {
                    b.Property<int>("IdRegRemo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idRegRemo")
                        .HasColumnType("int(11)");

                    b.Property<string>("CausaMorte")
                        .IsRequired()
                        .HasColumnName("causaMorte")
                        .HasColumnType("char(1)");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("datetime");

                    b.Property<int>("MotivoIdMotivo")
                        .HasColumnName("Motivo_idMotivo")
                        .HasColumnType("int(11)");

                    b.Property<int?>("NroRemocoes")
                        .IsRequired()
                        .HasColumnName("nroremocoes")
                        .HasColumnType("int(11)");

                    b.Property<int>("TanqueIdTanque")
                        .HasColumnName("Tanque_idTanque")
                        .HasColumnType("int(11)");

                    b.Property<int>("isarchived")
                        .HasColumnName("isarchived")
                        .HasColumnType("int(1)");

                    b.HasKey("IdRegRemo");

                    b.HasIndex("MotivoIdMotivo")
                        .HasName("fk_Reg_Remocoes_Motivo1");

                    b.HasIndex("TanqueIdTanque")
                        .HasName("fk_Reg_Remocoes_Tanque1");

                    b.ToTable("reg_remocoes");
                });

            modelBuilder.Entity("Bioterio.RegTratamento", b =>
                {
                    b.Property<int>("IdRegTra")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idRegTra")
                        .HasColumnType("int(11)");

                    b.Property<int>("AgenteTratIdAgenTra")
                        .HasColumnName("agente_Trat_idAgenTra")
                        .HasColumnType("int(11)");

                    b.Property<int?>("ConcAgenTra")
                        .HasColumnName("concAgenTra")
                        .HasColumnType("int(11)");

                    b.Property<float>("Concentracao");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("datetime");

                    b.Property<int>("FinalidadeIdFinalidade")
                        .HasColumnName("Finalidade_idFinalidade")
                        .HasColumnType("int(11)");

                    b.Property<int>("TanqueIdTanque")
                        .HasColumnName("Tanque_idTanque")
                        .HasColumnType("int(11)");

                    b.Property<int>("Tempo")
                        .HasColumnType("int(11)");

                    b.Property<int>("isarchived")
                        .HasColumnName("isarchived")
                        .HasColumnType("int(1)");

                    b.HasKey("IdRegTra");

                    b.HasIndex("AgenteTratIdAgenTra")
                        .HasName("fk_Reg_Tratamento_agente_Trat1");

                    b.HasIndex("FinalidadeIdFinalidade")
                        .HasName("fk_Reg_Tratamento_Finalidade1");

                    b.HasIndex("TanqueIdTanque")
                        .HasName("fk_Reg_Tratamento_Tanque1");

                    b.ToTable("reg_tratamento");
                });

            modelBuilder.Entity("Bioterio.Tanque", b =>
                {
                    b.Property<int>("IdTanque")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idTanque")
                        .HasColumnType("int(11)");

                    b.Property<int>("CircuitoTanqueIdCircuito")
                        .HasColumnName("Circuito_Tanque_idCircuito")
                        .HasColumnType("int(11)");

                    b.Property<int>("LoteIdLote")
                        .HasColumnName("Lote_idLote")
                        .HasColumnType("int(11)");

                    b.Property<int>("NroAnimais")
                        .HasColumnName("nroAnimais")
                        .HasColumnType("int(11)");

                    b.Property<string>("Observacoes")
                        .HasColumnName("observacoes")
                        .HasMaxLength(45);

                    b.Property<string>("Sala")
                        .IsRequired()
                        .HasColumnName("sala")
                        .HasMaxLength(15);

                    b.Property<string>("codidenttanque")
                        .IsRequired()
                        .HasColumnName("codidenttanque")
                        .HasMaxLength(255);

                    b.Property<int>("isarchived")
                        .HasColumnName("isarchived")
                        .HasColumnType("int(1)");

                    b.HasKey("IdTanque");

                    b.HasIndex("CircuitoTanqueIdCircuito")
                        .HasName("fk_Tanque_Circuito_Tanque1_idx");

                    b.HasIndex("LoteIdLote")
                        .HasName("fk_Tanque_Lote1_idx");

                    b.ToTable("tanque");
                });

            modelBuilder.Entity("Bioterio.TipoManuntecao", b =>
                {
                    b.Property<int>("IdTManutencao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idT_Manutencao")
                        .HasColumnType("int(11)");

                    b.Property<string>("TManutencao")
                        .IsRequired()
                        .HasColumnName("T_Manutencao")
                        .HasMaxLength(45);

                    b.HasKey("IdTManutencao");

                    b.ToTable("tipo_manuntecao");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Bioterio.Models.ApplicationUsers", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("FuncionarioIdFuncionario")
                        .HasColumnName("IdFuncionario")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdPerfil")
                        .HasColumnName("IdPerfil")
                        .HasColumnType("int(11)");

                    b.HasIndex("FuncionarioIdFuncionario");

                    b.HasIndex("IdPerfil");

                    b.ToTable("ApplicationUsers");

                    b.HasDiscriminator().HasValue("ApplicationUsers");
                });

            modelBuilder.Entity("Bioterio.CircuitoTanque", b =>
                {
                    b.HasOne("Bioterio.Projeto", "ProjetoIdProjetoNavigation")
                        .WithMany("CircuitoTanque")
                        .HasForeignKey("ProjetoIdProjeto")
                        .HasConstraintName("fk_Circuito_Tanque_Projeto1");
                });

            modelBuilder.Entity("Bioterio.Elementoequipa", b =>
                {
                    b.HasOne("Bioterio.Models.Funcionario", "FuncionarioIdFuncionarioNavigation")
                        .WithMany("Elementoequipa")
                        .HasForeignKey("FuncionarioIdFuncionario")
                        .HasConstraintName("fk_equipaProjeto_Funcionario1");

                    b.HasOne("Bioterio.Projeto", "ProjetoIdProjetoNavigation")
                        .WithMany("Elementoequipa")
                        .HasForeignKey("ProjetoIdProjeto")
                        .HasConstraintName("fk_equipaProjeto_Projeto1");
                });

            modelBuilder.Entity("Bioterio.Ensaio", b =>
                {
                    b.HasOne("Bioterio.Models.Lote", "LoteIdLoteNavigation")
                        .WithMany("Ensaio")
                        .HasForeignKey("LoteIdLote")
                        .HasConstraintName("fk_Ensaio_Lote1");

                    b.HasOne("Bioterio.Projeto", "ProjetoIdProjetoNavigation")
                        .WithMany("Ensaio")
                        .HasForeignKey("ProjetoIdProjeto")
                        .HasConstraintName("fk_Ensaio_Projeto1");
                });

            modelBuilder.Entity("Bioterio.Models.Concelho", b =>
                {
                    b.HasOne("Bioterio.Models.Distrito", "Distrito")
                        .WithMany("Concelho")
                        .HasForeignKey("DistritoId")
                        .HasConstraintName("fk_Concelho_Distrito1");
                });

            modelBuilder.Entity("Bioterio.Models.Especie", b =>
                {
                    b.HasOne("Bioterio.Models.Familia", "FamiliaIdFamiliaNavigation")
                        .WithMany("Especie")
                        .HasForeignKey("FamiliaIdFamilia")
                        .HasConstraintName("fk_Especie_Familia1");

                    b.HasOne("Bioterio.Models.Grupo", "GrupoIdGrupoNavigation")
                        .WithMany("Especie")
                        .HasForeignKey("GrupoIdGrupo")
                        .HasConstraintName("fk_Especie_Grupo1");
                });

            modelBuilder.Entity("Bioterio.Models.Familia", b =>
                {
                    b.HasOne("Bioterio.Models.Grupo", "GrupoIdGrupoNavigation")
                        .WithMany("Familia")
                        .HasForeignKey("GrupoIdGrupo")
                        .HasConstraintName("fk_Familia_Grupo1");
                });

            modelBuilder.Entity("Bioterio.Models.Localcaptura", b =>
                {
                    b.HasOne("Bioterio.Models.Concelho", "Concelho")
                        .WithMany("Localcaptura")
                        .HasForeignKey("ConcelhoId")
                        .HasConstraintName("fk_LocalCaptura_Concelho1");

                    b.HasOne("Bioterio.Models.Distrito", "Distrito")
                        .WithMany("Localcaptura")
                        .HasForeignKey("DistritoId")
                        .HasConstraintName("fk_LocalCaptura_Distrito1");
                });

            modelBuilder.Entity("Bioterio.Models.Lote", b =>
                {
                    b.HasOne("Bioterio.Models.Funcionario", "FuncionarioIdFuncionarioNavigation")
                        .WithMany("Lote")
                        .HasForeignKey("FuncionarioIdFuncionario")
                        .HasConstraintName("fk_Lote_Funcionario1");

                    b.HasOne("Bioterio.Models.RegNovosAnimais", "RegNovosAnimaisIdRegAnimalNavigation")
                        .WithMany("Lote")
                        .HasForeignKey("RegNovosAnimaisIdRegAnimal")
                        .HasConstraintName("fk_Lote_Reg_Novos_Animais1");
                });

            modelBuilder.Entity("Bioterio.Models.LoteSubLote", b =>
                {
                    b.HasOne("Bioterio.Models.Lote", "LoteIdLoteAtualNavigation")
                        .WithMany("LoteSubLoteLoteIdLoteAtualNavigation")
                        .HasForeignKey("LoteIdLoteAtual")
                        .HasConstraintName("fk_Sub_Lote_Lote2");

                    b.HasOne("Bioterio.Models.Lote", "LoteIdLotePrevNavigation")
                        .WithMany("LoteSubLoteLoteIdLotePrevNavigation")
                        .HasForeignKey("LoteIdLotePrev")
                        .HasConstraintName("fk_Sub_Lote_Lote1");
                });

            modelBuilder.Entity("Bioterio.Models.ProfileRole", b =>
                {
                    b.HasOne("Bioterio.Models.Perfil", "Profile")
                        .WithMany("Roles")
                        .HasForeignKey("IdPerfil")
                        .HasConstraintName("fk_IdPerfil");
                });

            modelBuilder.Entity("Bioterio.Models.RegNovosAnimais", b =>
                {
                    b.HasOne("Bioterio.Models.Especie", "EspecieIdEspecieNavigation")
                        .WithMany("RegNovosAnimais")
                        .HasForeignKey("EspecieIdEspecie")
                        .HasConstraintName("fk_Reg_Novos_Animais_Especie1");

                    b.HasOne("Bioterio.Models.Fornecedorcolector", "FornecedorIdFornColectNavigation")
                        .WithMany("RegNovosAnimais")
                        .HasForeignKey("FornecedorIdFornColect")
                        .HasConstraintName("fk_Reg_Novos_Animais_Fornecedor1");

                    b.HasOne("Bioterio.Models.Funcionario", "FuncionarioIdFuncionarioNavigation")
                        .WithMany("RegNovosAnimaisFuncionarioIdFuncionarioNavigation")
                        .HasForeignKey("FuncionarioIdFuncionario")
                        .HasConstraintName("fk_Reg_Novos_Animais_Funcionario1");

                    b.HasOne("Bioterio.Models.Funcionario", "FuncionarioIdFuncionario1Navigation")
                        .WithMany("RegNovosAnimaisFuncionarioIdFuncionario1Navigation")
                        .HasForeignKey("FuncionarioIdFuncionario1")
                        .HasConstraintName("fk_Reg_Novos_Animais_Funcionario2");

                    b.HasOne("Bioterio.Models.Localcaptura", "LocalCapturaIdLocalCapturaNavigation")
                        .WithMany("RegNovosAnimais")
                        .HasForeignKey("LocalCapturaIdLocalCaptura")
                        .HasConstraintName("fk_Reg_Novos_Animais_LocalCaptura1");

                    b.HasOne("Bioterio.Models.TOrigem", "TOrigemIdTOrigemNavigation")
                        .WithMany("RegNovosAnimais")
                        .HasForeignKey("TOrigemIdTOrigem")
                        .HasConstraintName("fk_Reg_Novos_Animais_T_Origem1");

                    b.HasOne("Bioterio.Models.Tipoestatutogenetico", "TipoEstatutoGeneticoIdTipoEstatutoGeneticoNavigation")
                        .WithMany("RegNovosAnimais")
                        .HasForeignKey("TipoEstatutoGeneticoIdTipoEstatutoGenetico")
                        .HasConstraintName("fk_Reg_Novos_Animais_TipoEstatutoGenetico1");
                });

            modelBuilder.Entity("Bioterio.RegAlimentar", b =>
                {
                    b.HasOne("Bioterio.PlanoAlimentar", "PlanoAlimentarIdPlanAlimNavigation")
                        .WithMany("RegAlimentar")
                        .HasForeignKey("PlanoAlimentarIdPlanAlim")
                        .HasConstraintName("fk_Reg_Alimentar_Plano_Alimentar1");

                    b.HasOne("Bioterio.Tanque", "TanqueIdTanqueNavigation")
                        .WithMany("RegAlimentar")
                        .HasForeignKey("TanqueIdTanque")
                        .HasConstraintName("fk_Reg_Alimentar_Tanque1");
                });

            modelBuilder.Entity("Bioterio.RegAmostragens", b =>
                {
                    b.HasOne("Bioterio.Tanque", "TanqueIdTanqueNavigation")
                        .WithMany("RegAmostragens")
                        .HasForeignKey("TanqueIdTanque")
                        .HasConstraintName("fk_Reg_Amostragens_Tanque1");
                });

            modelBuilder.Entity("Bioterio.RegCondAmb", b =>
                {
                    b.HasOne("Bioterio.CircuitoTanque", "CircuitoTanqueIdCircuitoNavigation")
                        .WithMany("RegCondAmb")
                        .HasForeignKey("CircuitoTanqueIdCircuito")
                        .HasConstraintName("fk_Reg_Cond_Amb_Circuito_Tanque1");
                });

            modelBuilder.Entity("Bioterio.RegManutencao", b =>
                {
                    b.HasOne("Bioterio.Tanque", "TanqueIdTanqueNavigation")
                        .WithMany("RegManutencao")
                        .HasForeignKey("TanqueIdTanque")
                        .HasConstraintName("fk_Reg_Manutencao_Tanque1");

                    b.HasOne("Bioterio.TipoManuntecao", "TipoManuntecaoIdTManutencaoNavigation")
                        .WithMany("RegManutencao")
                        .HasForeignKey("TipoManuntecaoIdTManutencao")
                        .HasConstraintName("fk_Reg_Manutencao_Tipo_Manuntecao1");
                });

            modelBuilder.Entity("Bioterio.RegRemocoes", b =>
                {
                    b.HasOne("Bioterio.Motivo", "MotivoIdMotivoNavigation")
                        .WithMany("RegRemocoes")
                        .HasForeignKey("MotivoIdMotivo")
                        .HasConstraintName("fk_Reg_Remocoes_Motivo1");

                    b.HasOne("Bioterio.Tanque", "TanqueIdTanqueNavigation")
                        .WithMany("RegRemocoes")
                        .HasForeignKey("TanqueIdTanque")
                        .HasConstraintName("fk_Reg_Remocoes_Tanque1");
                });

            modelBuilder.Entity("Bioterio.RegTratamento", b =>
                {
                    b.HasOne("Bioterio.AgenteTrat", "AgenteTratIdAgenTraNavigation")
                        .WithMany("RegTratamento")
                        .HasForeignKey("AgenteTratIdAgenTra")
                        .HasConstraintName("fk_Reg_Tratamento_agente_Trat1");

                    b.HasOne("Bioterio.Finalidade", "FinalidadeIdFinalidadeNavigation")
                        .WithMany("RegTratamento")
                        .HasForeignKey("FinalidadeIdFinalidade")
                        .HasConstraintName("fk_Reg_Tratamento_Finalidade1");

                    b.HasOne("Bioterio.Tanque", "TanqueIdTanqueNavigation")
                        .WithMany("RegTratamento")
                        .HasForeignKey("TanqueIdTanque")
                        .HasConstraintName("fk_Reg_Tratamento_Tanque1");
                });

            modelBuilder.Entity("Bioterio.Tanque", b =>
                {
                    b.HasOne("Bioterio.CircuitoTanque", "CircuitoTanqueIdCircuitoNavigation")
                        .WithMany("Tanque")
                        .HasForeignKey("CircuitoTanqueIdCircuito")
                        .HasConstraintName("fk_Tanque_Circuito_Tanque1");

                    b.HasOne("Bioterio.Models.Lote", "LoteIdLoteNavigation")
                        .WithMany("Tanque")
                        .HasForeignKey("LoteIdLote")
                        .HasConstraintName("fk_Tanque_Lote1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bioterio.Models.ApplicationUsers", b =>
                {
                    b.HasOne("Bioterio.Models.Funcionario", "FuncionarioNavigation")
                        .WithMany("User")
                        .HasForeignKey("FuncionarioIdFuncionario")
                        .HasConstraintName("fk_FuncionarioIdFuncionario");

                    b.HasOne("Bioterio.Models.Perfil", "PerfilNavigation")
                        .WithMany("User")
                        .HasForeignKey("IdPerfil")
                        .HasConstraintName("fk_PerfilId");
                });
#pragma warning restore 612, 618
        }
    }
}
